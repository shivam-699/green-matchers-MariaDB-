import streamlit as st
import requests
import time
import os
print("Current directory:", os.getcwd())
print("Files in directory:", os.listdir())

# Initialize session state
if 'lang' not in st.session_state:
    st.session_state.lang = 'en'
if 'skills' not in st.session_state:
    st.session_state.skills = []

# Set page configuration
st.set_page_config(page_title="Green Matchers", page_icon="ЁЯМ▒", layout="centered")




translations = {
    "en": {
        "title": "ЁЯМ▒ Green Matchers: AI-Powered Eco Job Revolution",
        "select_skills": "Select your skills (or type new ones):",
        "button": "Discover Green Jobs & Stories",
        "matches_header": "View Job Matches",
        "story_header": "Read Your Green Story",
        "no_matches": "No matches foundтАФadd more jobs via backend!",
        "enter_skills": "Please select or enter at least one skill!",
        "error": "Error: {error} - Ensure backend is running at http://127.0.0.1:8000!",
        "success": "Matches found!",
        "time_help": "Time & Help",
        "search": "Search",
        "certificate": "Certification",
        "ai_internship": "AI Internship",
        "company": "Company",
        "project": "Projects",
        "prompt_word": "Prompt",
        "language": "Select Language",
        "personal_details": "Personal Details"        
    },
    "hi": {
        "title": "ЁЯМ▒ рдЧреНрд░реАрди рдореИрдЪрд░реНрд╕: AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдиреМрдХрд░реА рдХреНрд░рд╛рдВрддрд┐",
        "select_skills": "рдЕрдкрдиреА рд╕реНрдХрд┐рд▓реНрд╕ рдЪреБрдиреЗрдВ (рдпрд╛ рдирдИ рдЬреЛрдбрд╝реЗрдВ):",
        "button": "рдЧреНрд░реАрди рдЬреЙрдмреНрд╕ рдФрд░ рдХрд╣рд╛рдирд┐рдпрд╛рдВ рдЦреЛрдЬреЗрдВ",
        "matches_header": "рдЬреЙрдм рдореИрдЪ рджреЗрдЦреЗрдВ",
        "story_header": "рдЕрдкрдиреА рдЧреНрд░реАрди рдХрд╣рд╛рдиреА рдкрдврд╝реЗрдВ",
        "no_matches": "рдХреЛрдИ рдореИрдЪ рдирд╣реАрдВ рдорд┐рд▓рд╛тАФрдмреИрдХрдПрдВрдб рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЕрдзрд┐рдХ рдЬреЙрдмреНрд╕ рдЬреЛрдбрд╝реЗрдВ!",
        "enter_skills": "рдХреГрдкрдпрд╛ рдХрдо рд╕реЗ рдХрдо рдПрдХ рд╕реНрдХрд┐рд▓ рдЪреБрдиреЗрдВ рдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВ!",
        "error": "рддреНрд░реБрдЯрд┐: {error} - рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдмреИрдХрдПрдВрдб http://127.0.0.1:8000 рдкрд░ рдЪрд▓ рд░рд╣рд╛ рд╣реИ!",
        "success": "рдореИрдЪ рдорд┐рд▓ рдЧрдП!",
        "time_help": "рд╕рдордп рдФрд░ рд╕рд╣рд╛рдпрддрд╛",
        "search": "рдЦреЛрдЬ",
        "certificate": "рдкреНрд░рдорд╛рдгрдкрддреНрд░",
        "ai_internship": "AI рдЗрдВрдЯрд░реНрдирд╢рд┐рдк",
        "company": "рдХрдВрдкрдиреА",
        "project": "рдкрд░рд┐рдпреЛрдЬрдирд╛рдПрдВ",
        "prompt_word": "рдкреНрд░реЙрдореНрдкреНрдЯ",
        "language": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "personal_details": "рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╡рд┐рд╡рд░рдг"
    },
    "bn": {
        "title": "ЁЯМ▒ ржЧрзНрж░рж┐ржи ржорзНржпрж╛ржЪрж╛рж░рзНрж╕: ржПржЖржЗ-ржЪрж╛рж▓рж┐ржд ржЗржХрзЛ ржЬржм ржмрж┐ржкрзНрж▓ржм",
        "select_skills": "ржЖржкржирж╛рж░ ржжржХрзНрж╖рждрж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи (ржирждрзБржи ржпрзЛржЧ ржХрж░рзБржи):",
        "button": "ржЧрзНрж░рж┐ржи ржЪрж╛ржХрж░рж┐ ржПржмржВ ржЧрж▓рзНржк ржЖржмрж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи",
        "matches_header": "ржЪрж╛ржХрж░рж┐рж░ ржорж┐рж▓ ржжрзЗржЦрзБржи",
        "story_header": "ржЖржкржирж╛рж░ ржЧрзНрж░рж┐ржи ржЧрж▓рзНржк ржкржбрж╝рзБржи",
        "no_matches": "ржХрзЛржирзЛ ржорж┐рж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐тАФржмрзНржпрж╛ржХржПржирзНржбрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЖрж░ржУ ржЪрж╛ржХрж░рж┐ ржпрзЛржЧ ржХрж░рзБржи!",
        "enter_skills": "ржжржпрж╝рж╛ ржХрж░рзЗ ржХржоржкржХрзНрж╖рзЗ ржПржХржЯрж┐ ржжржХрзНрж╖рждрж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи ржмрж╛ рж▓рж┐ржЦрзБржи!",
        "error": "рждрзНрж░рзБржЯрж┐: {error} - ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржмрзНржпрж╛ржХржПржирзНржб http://127.0.0.1:8000 ржЪрж▓ржЫрзЗ!",
        "success": "ржорж┐рж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ!",
        "time_help": "рж╕ржоржпрж╝ ржПржмржВ рж╕рж╛рж╣рж╛ржпрзНржп",
        "search": "ржЕржирзБрж╕ржирзНржзрж╛ржи",
        "certificate": "ржкрзНрж░ржорж╛ржгржкрждрзНрж░",
        "ai_internship": "AI ржЗржирзНржЯрж╛рж░рзНржирж╢рж┐ржк",
        "company": "ржХрзЛржорзНржкрж╛ржирж┐",
        "project": "ржкрзНрж░ржХрж▓рзНржк",
        "prompt_word": "ржкрзНрж░ржорзНржкржЯ",
        "language": "ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "personal_details": "ржмрзНржпржХрзНрждрж┐ржЧржд ржмрж┐ржмрж░ржг"
    },
    "mr": {
        "title": "ЁЯМ▒ рдЧреНрд░реАрди рдореЕрдЪрд░реНрд╕: AI-рджреНрд╡рд╛рд░реЗ рдЪрд╛рд▓рд┐рдд рдЗрдХреЛ рдиреЛрдХрд░реА рдХреНрд░рд╛рдВрддреА",
        "select_skills": "рддреБрдордЪреНрдпрд╛ рдХреМрд╢рд▓реНрдпрд╛рдВрдЪрд╛ рдирд┐рд╡рдбрд╛ (рдХрд┐рдВрд╡рд╛ рдирд╡реАрди рдЬреЛрдбрд╛):",
        "button": "рдЧреНрд░реАрди рдиреЛрдХрд▒реНрдпрд╛ рдЖрдгрд┐ рдХрдерд╛ рд╢реЛрдзрд╛",
        "matches_header": "рдиреЛрдХрд░реА рдореЕрдЪ рдкрд╣рд╛",
        "story_header": "рддреБрдордЪреА рдЧреНрд░реАрди рдХрдерд╛ рд╡рд╛рдЪрд╛",
        "no_matches": "рдХреЛрдгрддрд╛рд╣реА рдореЕрдЪ рд╕рд╛рдкрдбрд▓рд╛ рдирд╛рд╣реАтАФрдмреЕрдХрдПрдВрдбрджреНрд╡рд╛рд░реЗ рдЕрдзрд┐рдХ рдиреЛрдХрд▒реНрдпрд╛ рдЬреЛрдбрд╛!",
        "enter_skills": "рдХреГрдкрдпрд╛ рдХрд┐рдорд╛рди рдПрдХ рдХреМрд╢рд▓реНрдп рдирд┐рд╡рдбрд╛ рдХрд┐рдВрд╡рд╛ рдЯрд╛рдХрд╛!",
        "error": "рддреНрд░реБрдЯреА: {error} - рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рд╛ рдХреА рдмреЕрдХрдПрдВрдб http://127.0.0.1:8000 рд╡рд░ рдЪрд╛рд▓реВ рдЖрд╣реЗ!",
        "success": "рдореЕрдЪ рд╕рд╛рдкрдбрд▓реЗ!",
        "time_help": "рд╡реЗрд│ рдЖрдгрд┐ рдорджрдд",
        "search": "рд╢реЛрдз",
        "certificate": "рдкреНрд░рдорд╛рдгрдкрддреНрд░",
        "ai_internship": "AI рдЗрдВрдЯрд░реНрдирд╢рд┐рдк",
        "company": "рдХрдВрдкрдиреА",
        "project": "рдкреНрд░рдХрд▓реНрдк",
        "prompt_word": "рдкреНрд░реЙрдореНрдкреНрдЯ",
        "language": "рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛",
        "personal_details": "рд╡реИрдпрдХреНрддрд┐рдХ рддрдкрд╢реАрд▓"
    },
    "te": {
        "title": "ЁЯМ▒ р░Чр▒Нр░░р▒Ар░ир▒Н р░ор▒Нр░пр░╛р░Ър░░р▒Нр░╕р▒Н: AI-р░Ър▒Зр░д р░ир░бр░┐р░Ър▒З р░Ор░Хр▒Л р░Йр░жр▒Нр░пр▒Лр░Ч р░╡р░┐р░кр▒Нр░▓р░╡р░В",
        "select_skills": "р░ор▒А р░ир▒Ир░кр▒Бр░гр▒Нр░пр░╛р░▓р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐ (р░Хр▒Кр░др▒Нр░др░╡р░┐ р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐):",
        "button": "р░Чр▒Нр░░р▒Ар░ир▒Н р░Йр░жр▒Нр░пр▒Лр░Чр░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░Хр░ер░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐",
        "matches_header": "р░Йр░жр▒Нр░пр▒Лр░Ч р░ор▒Нр░пр░╛р░Ър▒НтАМр░▓р▒Б р░Ър▒Вр░бр░Вр░бр░┐",
        "story_header": "р░ор▒А р░Чр▒Нр░░р▒Ар░ир▒Н р░Хр░ер░ир▒Б р░Ър░жр░╡р░Вр░бр░┐",
        "no_matches": "р░ор▒Нр░пр░╛р░Ър▒НтАМр░▓р▒Б р░▓р▒Зр░╡р▒БтАФр░мр▒Нр░пр░╛р░Хр▒Жр░Вр░бр▒Н р░жр▒Нр░╡р░╛р░░р░╛ р░ор░░р░┐р░ир▒Нр░ир░┐ р░Йр░жр▒Нр░пр▒Лр░Чр░╛р░▓р▒Б р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐!",
        "enter_skills": "р░жр░пр░Ър▒Зр░╕р░┐ р░Хр░ир▒Ар░╕р░В р░Тр░Х р░ир▒Ир░кр▒Бр░гр▒Нр░пр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░Ор░Вр░Яр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐!",
        "error": "р░кр▒Кр░░р▒Нр░кр▒Б: {error} - р░мр▒Нр░пр░╛р░Хр▒Жр░Вр░бр▒Н http://127.0.0.1:8000 р░кр▒И р░░р░ир▒Н р░Ер░╡р▒Бр░др▒Бр░ир▒Нр░ир░Яр▒Нр░▓р▒Б р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐!",
        "success": "р░ор▒Нр░пр░╛р░Ър▒НтАМр░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр▒Нр░бр░╛р░пр░┐!",
        "time_help": "р░╕р░ор░пр░В р░ор░░р░┐р░пр▒Б р░╕р░╣р░╛р░пр░В",
        "search": "р░╕р▒Жр░░р▒Нр░Ър▒Н",
        "certificate": "р░╕р░░р▒Нр░Яр░┐р░лр░┐р░Хр▒Жр░Яр▒Н",
        "ai_internship": "AI р░Зр░Вр░Яр░░р▒Нр░ир▒НтАМр░╖р░┐р░кр▒Н",
        "company": "р░Хр░Вр░кр▒Жр░ир▒А",
        "project": "р░кр▒Нр░░р░╛р░Ьр▒Жр░Хр▒Нр░Яр▒НтАМр░▓р▒Б",
        "prompt_word": "р░кр▒Нр░░р░╛р░Вр░кр▒Нр░Яр▒Н",
        "language": "р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "personal_details": "р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╡р░┐р░╡р░░р░╛р░▓р▒Б"
    },
    "ta": {
        "title": "ЁЯМ▒ рокроЪрпБроорпИ рокрпКро░рпБродрпНродроЩрпНроХро│рпН: AI-роЖро▓рпН роЗропроХрпНроХрокрпНрокроЯрпБроорпН рокроЪрпБроорпИ ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ рокрпБро░роЯрпНроЪро┐",
        "select_skills": "роЙроЩрпНроХро│рпН родро┐ро▒ройрпНроХро│рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН (рокрпБродро┐ропро╡ро▒рпНро▒рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН):",
        "button": "рокроЪрпБроорпИ ро╡рпЗро▓рпИроХро│рпН рооро▒рпНро▒рпБроорпН роХродрпИроХро│рпИ роХрогрпНроЯро▒ро┐",
        "matches_header": "ро╡рпЗро▓рпИ рокрпКро░рпБродрпНродроЩрпНроХро│рпИ рокро╛ро░рпН",
        "story_header": "роЙроЩрпНроХро│рпН рокроЪрпБроорпИ роХродрпИропрпИ рокроЯро┐",
        "no_matches": "рокрпКро░рпБродрпНродроЩрпНроХро│рпН роЗро▓рпНро▓рпИтАФрокро┐ройрпНройрогро┐ роорпВро▓роорпН роорпЗро▓рпБроорпН ро╡рпЗро▓рпИроХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН!",
        "enter_skills": "роХрпБро▒рпИроирпНродродрпБ роТро░рпБ родро┐ро▒роорпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЙро│рпНро│ро┐роЯро╡рпБроорпН!",
        "error": "рокро┐ро┤рпИ: {error} - рокро┐ройрпНройрогро┐ http://127.0.0.1:8000 роЗро▓рпН роЗропроЩрпНроХрпБро╡родрпИ роЙро▒рпБродро┐ роЪрпЖропрпНропро╡рпБроорпН!",
        "success": "рокрпКро░рпБродрпНродроЩрпНроХро│рпН роХро┐роЯрпИродрпНродрой!",
        "time_help": "роирпЗро░роорпН рооро▒рпНро▒рпБроорпН роЙродро╡ро┐",
        "search": "родрпЗроЯро▓рпН",
        "certificate": "роЪро╛ройрпНро▒ро┐родро┤рпН",
        "ai_internship": "AI роЗройрпНроЯро░рпНройрпНро╖ро┐рокрпН",
        "company": "роиро┐ро▒рпБро╡ройроорпН",
        "project": "родро┐роЯрпНроЯроЩрпНроХро│рпН",
        "prompt_word": "роХрпБро▒ро┐рокрпНрокрпБ",
        "language": "роорпКро┤ро┐ропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "personal_details": "ро╡р▒Нр░проХрпНродро┐роЗродро┤рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН"
    },
    "gu": {
        "title": "ЁЯМ▒ ркЧрлНрк░рлАрки ркорлЗркЪрк░рлНрк╕: AI-ркжрлНрк╡рк╛рк░рк╛ ркЪрк▓рк╛рк╡рк╡рк╛ркорк╛ркВ ркЖрк╡ркдрлА ркЗркХрлЛ ркЬрлЛркм ркХрлНрк░рк╛ркВркдрк┐",
        "select_skills": "ркдркорк╛рк░рлА ркХрлБрк╢рк│ркдрк╛ркУ рккрк╕ркВркж ркХрк░рлЛ (ркЕркерк╡рк╛ ркирк╡рлА ркЙркорлЗрк░рлЛ):",
        "button": "ркЧрлНрк░рлАрки ркЬрлЛркмрлНрк╕ ркЕркирлЗ рк╡рк╛рк░рлНркдрк╛ркУ рк╢рлЛркзрлЛ",
        "matches_header": "ркЬрлЛркм ркорлЗркЪ ркЬрлБркУ",
        "story_header": "ркдркорк╛рк░рлА ркЧрлНрк░рлАрки рк╡рк╛рк░рлНркдрк╛ рк╡рк╛ркВркЪрлЛ",
        "no_matches": "ркХрлЛркИ ркорлЗркЪ ркорк│рлНркпрлБркВ ркиркерлАтАФркмрлЗркХркПркирлНркб ркжрлНрк╡рк╛рк░рк╛ рк╡ркзрлБ ркЬрлЛркмрлНрк╕ ркЙркорлЗрк░рлЛ!",
        "enter_skills": "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркУркЫрк╛ркорк╛ркВ ркУркЫрлБркВ ркПркХ ркХрлБрк╢рк│ркдрк╛ рккрк╕ркВркж ркХрк░рлЛ ркЕркерк╡рк╛ рк▓ркЦрлЛ!",
        "error": "ркнрлВрк▓: {error} - ркЦрк╛ркдрк░рлА ркХрк░рлЛ ркХрлЗ ркмрлЗркХркПркирлНркб http://127.0.0.1:8000 рккрк░ ркЪрк╛рк▓рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ!",
        "success": "ркорлЗркЪ ркорк│рлНркпрк╛!",
        "time_help": "рк╕ркоркп ркЕркирлЗ ркоркжркж",
        "search": "рк╢рлЛркз",
        "certificate": "рккрлНрк░ркорк╛ркгрккркдрлНрк░",
        "ai_internship": "AI ркЗркирлНркЯрк░рлНркирк╢рк┐ркк",
        "company": "ркХркВрккркирлА",
        "project": "рккрлНрк░рлЛркЬрлЗркХрлНркЯрлНрк╕",
        "prompt_word": "рккрлНрк░рлЛркорлНрккрлНркЯ",
        "language": "ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ",
        "personal_details": "рк╡рлНркпркХрлНркдрк┐ркЧркд рк╡рк┐ркЧркдрлЛ"
    },
    "ur": {
        "title": "ЁЯМ▒ ┌п╪▒█М┘Ж ┘Е█М┌Ж╪▒╪▓: AI ╪│█Т ┌Ж┘Д┘Ж█Т ┘И╪з┘Д█М ╪з█М┌й┘И ╪м╪з╪и ╪з┘Ж┘В┘Д╪з╪и",
        "select_skills": "╪з┘╛┘Ж█М ┘Е█Б╪з╪▒╪к█М┌║ ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║ (█М╪з ┘Ж╪ж█М ╪┤╪з┘Е┘Д ┌й╪▒█М┌║):",
        "button": "┌п╪▒█М┘Ж ╪м╪з╪и╪▓ ╪з┘И╪▒ ┌й█Б╪з┘Ж█М╪з┌║ ╪к┘Д╪з╪┤ ┌й╪▒█М┌║",
        "matches_header": "╪м╪з╪и ┘Е█М┌Ж ╪п█М┌й┌╛█М┌║",
        "story_header": "╪з┘╛┘Ж█М ┌п╪▒█М┘Ж ┌й█Б╪з┘Ж█М ┘╛┌С┌╛█М┌║",
        "no_matches": "┌й┘И╪ж█М ┘Е█М┌Ж ┘Ж█Б█М┌║ ┘Е┘Д╪зтАФ╪и█М┌й ╪з█М┘Ж┌И ┌й█Т ╪░╪▒█М╪╣█Т ┘Е╪▓█М╪п ╪м╪з╪и╪▓ ╪┤╪з┘Е┘Д ┌й╪▒█М┌║!",
        "enter_skills": "╪и╪▒╪з█Б ┘Е█Б╪▒╪и╪з┘Ж█М ┌й┘Е ╪з╪▓ ┌й┘Е ╪з█М┌й ┘Е█Б╪з╪▒╪к ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║ █М╪з ╪п╪▒╪м ┌й╪▒█М┌║!",
        "error": "╪║┘Д╪╖█М: {error} - █М┘В█М┘Ж█М ╪и┘Ж╪з╪ж█М┌║ ┌й█Б ╪и█М┌й ╪з█М┘Ж┌И http://127.0.0.1:8000 ┘╛╪▒ ┌Ж┘Д ╪▒█Б╪з █Б█Т!",
        "success": "┘Е█М┌Ж ┘Е┘Д ┌п╪ж█Т!",
        "time_help": "┘И┘В╪к ╪з┘И╪▒ ┘Е╪п╪п",
        "search": "╪к┘Д╪з╪┤",
        "certificate": "╪│╪▒┘╣█М┘Б┌й█М┘╣",
        "ai_internship": "AI ╪з┘Ж┘╣╪▒┘Ж╪┤┘╛",
        "company": "┌й┘Е┘╛┘Ж█М",
        "project": "┘╛╪▒┘И╪м█М┌й┘╣╪│",
        "prompt_word": "┘╛╪▒┘И┘Е┘╛┘╣",
        "language": "╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "personal_details": "╪░╪з╪к█М ╪к┘Б╪╡█М┘Д╪з╪к"
    },
    "kn": {
        "title": "ЁЯМ▒ р▓Чр│Нр▓░р│Ар▓ир│Н р▓ор│Нр▓пр▓╛р▓Ър▓░р│Нр▓╕р│Н: AI-р▓Ър▓╛р▓▓р▓┐р▓д р▓Зр▓Хр│Л р▓Йр▓жр│Нр▓пр│Лр▓Ч р▓Хр│Нр▓░р▓╛р▓Вр▓др▓┐",
        "select_skills": "р▓ир▓┐р▓ор│Нр▓о р▓Хр│Мр▓╢р▓▓р│Нр▓пр▓Чр▓│р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐ (р▓Ер▓ер▓╡р▓╛ р▓╣р│Кр▓╕р▓жр▓ир│Нр▓ир│Б р▓╕р│Зр▓░р▓┐р▓╕р▓┐):",
        "button": "р▓Чр│Нр▓░р│Ар▓ир│Н р▓Йр▓жр│Нр▓пр│Лр▓Чр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Хр▓ер│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр▓Вр▓бр│Бр▓╣р▓┐р▓бр▓┐р▓пр▓┐р▓░р▓┐",
        "matches_header": "р▓Йр▓жр│Нр▓пр│Лр▓Ч р▓╣р│Кр▓Вр▓жр▓╛р▓гр▓┐р▓Хр│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Лр▓бр▓┐",
        "story_header": "р▓ир▓┐р▓ор│Нр▓о р▓Чр│Нр▓░р│Ар▓ир│Н р▓Хр▓ер│Жр▓пр▓ир│Нр▓ир│Б р▓Ур▓жр▓┐",
        "no_matches": "р▓╣р│Кр▓Вр▓жр▓╛р▓гр▓┐р▓Хр│Жр▓Чр▓│р│Б р▓жр│Кр▓░р│Жр▓др▓┐р▓▓р│Нр▓▓тАФр▓мр│Нр▓пр▓╛р▓Хр│Жр▓Вр▓бр│Н р▓ор│Вр▓▓р▓Х р▓╣р│Жр▓Ър│Нр▓Ър│Б р▓Йр▓жр│Нр▓пр│Лр▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓╕р│Зр▓░р▓┐р▓╕р▓┐!",
        "enter_skills": "р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Хр▓ир▓┐р▓╖р│Нр▓а р▓Тр▓Вр▓жр│Б р▓Хр│Мр▓╢р▓▓р│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐ р▓Ер▓ер▓╡р▓╛ р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐!",
        "error": "р▓жр│Лр▓╖: {error} - р▓мр│Нр▓пр▓╛р▓Хр│Жр▓Вр▓бр│Н http://127.0.0.1:8000 р▓ир▓▓р│Нр▓▓р▓┐ р▓Ър▓▓р▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓жр│Жр▓пр│Жр▓Вр▓жр│Б р▓Цр▓Ър▓┐р▓др▓кр▓бр▓┐р▓╕р▓┐!",
        "success": "р▓╣р│Кр▓Вр▓жр▓╛р▓гр▓┐р▓Хр│Жр▓Чр▓│р│Б р▓╕р▓┐р▓Хр│Нр▓Хр▓┐р▓╡р│Ж!",
        "time_help": "р▓╕р▓ор▓п р▓ор▓др│Нр▓др│Б р▓╕р▓╣р▓╛р▓п",
        "search": "р▓╣р│Бр▓бр│Бр▓Хр▓╛р▓Я",
        "certificate": "р▓кр│Нр▓░р▓ор▓╛р▓гр▓кр▓др│Нр▓░",
        "ai_internship": "AI р▓Зр▓Вр▓Яр▓░р│Нр▓ир│НтАМр▓╢р▓┐р▓кр│Н",
        "company": "р▓Хр▓Вр▓кр▓ир▓┐",
        "project": "р▓кр│Нр▓░р▓╛р▓Ьр│Жр▓Хр│Нр▓Яр│НтАМр▓Чр▓│р│Б",
        "prompt_word": "р▓кр│Нр▓░р▓╛р▓Вр▓кр│Нр▓Яр│Н",
        "language": "р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
        "personal_details": "р▓╡р│Нр▓пр▓Хр│Нр▓др▓┐р▓Чр▓д р▓╡р▓┐р▓╡р▓░р▓Чр▓│р│Б"
    },
    "or": {
        "title": "ЁЯМ▒ рмЧрнНрм░рм┐рмирнН рморнНрнЯрм╛рмЪрм░рнНрм╕: AI-рмжрнНрн▒рм╛рм░рм╛ рмЪрм╛рм▓рм┐рмд рмЗрмХрнЛ рмЬрммрнН рммрм┐рмкрнНрм│рмм",
        "select_skills": "рмдрнБрморм░ рм╕рнНрмХрм┐рм▓рнНрмЧрнБрмбрм╝рм┐рмХрнБ рммрм╛рмЫрмирнНрмдрнБ (рмирм╛рм╣рм┐рмБрмдрнЗ рмирнВрмЖ рмпрнЛрмбрм╝рмирнНрмдрнБ):",
        "button": "рмЧрнНрм░рм┐рмирнН рмЬрммрнН рмПрммрмВ рмХрм╛рм╣рм╛рмгрнА рмЦрнЛрмЬрмирнНрмдрнБ",
        "matches_header": "рмЬрммрнН рморнНрнЯрм╛рмЪ рмжрнЗрмЦрмирнНрмдрнБ",
        "story_header": "рмдрнБрморм░ рмЧрнНрм░рм┐рмирнН рмХрм╛рм╣рм╛рмгрнА рмкрмврм╝рмирнНрмдрнБ",
        "no_matches": "рмХрнМрмгрм╕рм┐ рморнНрнЯрм╛рмЪрнН рморм┐рм│рм┐рм▓рм╛ рмирм╛рм╣рм┐рмБтАФрммрнНрнЯрм╛рмХрнЗрмгрнНрмб рморм╛рмзрнНрнЯрморм░рнЗ рмЕрмзрм┐рмХ рмЬрммрнН рмпрнЛрмбрм╝рмирнНрмдрнБ!",
        "enter_skills": "рмжрнЯрм╛рмХрм░рм┐ рмЕрмдрм┐ рмХрморм░рнЗ рмПрмХ рм╕рнНрмХрм┐рм▓рнН рммрм╛рмЫрмирнНрмдрнБ рмХрм┐рморнНрммрм╛ рм▓рнЗрмЦрмирнНрмдрнБ!",
        "error": "рмдрнНрм░рнБрмЯрм┐: {error} - рмирм┐рм╢рнНрмЪрм┐рмд рмХрм░рмирнНрмдрнБ рмпрнЗ рммрнНрнЯрм╛рмХрнЗрмгрнНрмб http://127.0.0.1:8000 рмЪрм╛рм▓рнБ рмЕрмЫрм┐!",
        "success": "рморнНрнЯрм╛рмЪрнН рморм┐рм│рм┐рм▓рм╛!",
        "time_help": "рм╕рморнЯ рмПрммрмВ рм╕рм╛рм╣рм╛рмпрнНрнЯ",
        "search": "рмЦрнЛрмЬ",
        "certificate": "рмкрнНрм░рморм╛рмгрмкрмдрнНрм░",
        "ai_internship": "AI рмЗрмирнНрмЯрм░рнНрмирм╢рм┐рмк",
        "company": "рмХрморнНрмкрм╛рмирнА",
        "project": "рмкрнНрм░рмХрм│рнНрмк",
        "prompt_word": "рмкрнНрм░рморнНрмкрнНрмЯ",
        "language": "рмнрм╛рм╖рм╛ рмЪрнЯрми рмХрм░рмирнНрмдрнБ",
        "personal_details": "рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рммрм┐рммрм░рмгрнА"
    },
    "ml": {
        "title": "ЁЯМ▒ р┤Чр╡Нр┤░р╡Ар╡╗ р┤ор┤╛р┤Ър╡Нр┤Ър╡Зр┤┤р╡Нр┤╕р╡Н: AI-р┤ир╡НтАНр┤▒р╡Ж р┤╕р┤╣р┤╛р┤пр┤др╡Нр┤др╡Лр┤Яр╡Ж р┤кр┤░р┤┐р┤╕р╡Нр┤ер┤┐р┤др┤┐ р┤╕р╡Чр┤╣р╡Гр┤ж р┤Ьр╡Лр┤▓р┤┐ р┤╡р┤┐р┤кр╡Нр┤▓р┤╡р┤В",
        "select_skills": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр┤┤р┤┐р┤╡р╡Бр┤Хр╡╛ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х (р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤кр╡Бр┤др┤┐р┤пр┤др╡Н р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х):",
        "button": "р┤Чр╡Нр┤░р╡Ар╡╗ р┤Ьр╡Лр┤▓р┤┐р┤Хр┤│р╡Бр┤В р┤Хр┤ер┤Хр┤│р╡Бр┤В р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х",
        "matches_header": "р┤Ьр╡Лр┤▓р┤┐ р┤ор┤╛р┤Ър╡Нр┤Ър╡Бр┤Хр╡╛ р┤Хр┤╛р┤гр╡Бр┤Х",
        "story_header": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Чр╡Нр┤░р╡Ар╡╗ р┤Хр┤е р┤╡р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "no_matches": "р┤ор┤╛р┤Ър╡Нр┤Ър╡Бр┤Хр╡╛ р┤Хр┤┐р┤Яр╡Нр┤Яр┤┐р┤пр┤┐р┤▓р╡Нр┤▓тАФр┤мр┤╛р┤Хр╡Нр┤Хр╡НтАМр┤Ор╡╗р┤бр╡Н р┤╡р┤┤р┤┐ р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤Ьр╡Лр┤▓р┤┐р┤Хр╡╛ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х!",
        "enter_skills": "р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤Хр╡Бр┤▒р┤Юр╡Нр┤Юр┤др╡Н р┤Тр┤░р╡Б р┤Хр┤┤р┤┐р┤╡р╡Н р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤ир╡╜р┤Хр╡Бр┤Х!",
        "error": "р┤кр┤┐р┤╢р┤Хр╡Н: {error} - р┤мр┤╛р┤Хр╡Нр┤Хр╡НтАМр┤Ор╡╗р┤бр╡Н http://127.0.0.1:8000-р╡╜ р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Бр┤гр╡Нр┤Яр╡Жр┤ир╡Нр┤ир╡Н р┤Йр┤▒р┤кр╡Нр┤кр┤╛р┤Хр╡Нр┤Хр╡Бр┤Х!",
        "success": "р┤ор┤╛р┤Ър╡Нр┤Ър╡Бр┤Хр╡╛ р┤Хр┤┐р┤Яр╡Нр┤Яр┤┐!",
        "time_help": "р┤╕р┤ор┤пр┤╡р╡Бр┤В р┤╕р┤╣р┤╛р┤пр┤╡р╡Бр┤В",
        "search": "р┤др┤┐р┤░р┤пр╡╜",
        "certificate": "р┤╕р╡╝р┤Яр╡Нр┤Яр┤┐р┤лр┤┐р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н",
        "ai_internship": "AI р┤Зр┤ир╡Нр┤▒р╡╝р┤ир╡Нр┤╖р┤┐р┤кр╡Нр┤кр╡Н",
        "company": "р┤Хр┤ор╡Нр┤кр┤ир┤┐",
        "project": "р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛",
        "prompt_word": "р┤кр╡Нр┤░р╡Лр┤Вр┤кр╡Нр┤▒р╡Нр┤▒р╡Н",
        "language": "р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "personal_details": "р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛"
    }
}




# Custom CSS for navigation bar and existing styling
st.markdown("""
    <style>
    .header-container {
        display: flex;
        align-items: center;
        background: linear-gradient(90deg, #00695c 0%, #009688 100%);
        padding: 5px 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
        animation: fadeIn 1s ease-in;
    }
    .navbar {
        display: flex;
        align-items: center;
        margin-top: 40px;
        margin-left: 50px;
    }
    
    .navbar a, .navbar button {
        background: #ff9800;
        color: white;
        text-decoration: none;
        margin: 0px 8px;
        border-radius:15px;
        font-family: Arial, sans-serif;
        font-size: 16px;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block; /* Ensure consistent box model */
        vertical-align: middle; /* Align text vertically */
    }
    .navbar a:hover, .navbar button {
        background-color: #f57c00;    
    }
    .navbar .dropdown {
        position: relative;
        display: inline-block;
    }
    .dropdown-content {
        display: none;
        position: absolute;
        min-width: 160px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        z-index: 1;
        border-radius:10px;
    }
    .dropdown:hover .dropdown-content {
        display: block;
    }    
    .dropdown-content a {
        background-color: #ff9800;
        color: white;
        margin:5px 10px;
        padding:12px 16px;
        display: block;
        border-radius: 5px 15px;
        transition: background-color 0.3s ease;
    }
    .dropdown-content a:hover {
        background-color: #f57c00;
    }
            
    .highlight {
        background-color: #ff9800;
        padding: 5px 10px;
        border-radius: 5px;
    }
    .highlight:hover {
        background-color: #f57c00;
    }
            
    .login-btn {
        background: #ff9800;
        border: none;
        padding: 5px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 17px;
        height: 36px;
        line-height: 20px;
        transition: all 0.3s ease;
    }
    .login-btn:hover {
        background-color: #f57c00;
    }
    .profile-icon {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #00695c;
        font-weight: bold;
        margin-left: 15px;
    }
    .main {
        background: linear-gradient(135deg, #e0f7fa 0%, #b2dfdb 100%);
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    @media (max-width: 100%) {
        .header-title { font-size: 30px; }
        .section-card { padding: 15px; }
        .stButton>button { font-size: 16px; padding: 10px 20px; }
        .main { padding: 10px; }
        .navbar a, .navbar button { margin: 0 10px; font-size: 14px; }
        .profile-icon { width: 25px; height: 25px; }
    }
    .header-title {
        font-size: 50px;
        font-weight: 700;
        margin-bottom: 15px;
        text-shadow: 3px 3px 6px rgba(0,0,0,0.4);
    }
    .section-card {
        background: linear-gradient(90deg, #00695c 0%, #009688 100%);
        padding: 10px;
        border-radius: 15px;
        box-shadow: 0 6px 18px rgba(0,0,0,0.15);
        margin-bottom: 20px;
        border-left: 6px solid #009688;
    }
    .section-card:hover {
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
    }
    .section-title {
        color: white;
        font-size: 26px;
        font-weight: 600;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
    }
    .icon-box {
        background: #e0f7fa;
        color:black;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        margin: 15px 0;
        border: 2px solid #009688;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .icon-box:hover {
        background: #b2dfdb;
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.2);
    }
    .stButton>button {
        background: linear-gradient(90deg, #00695c 0%, #009688 100%);
        color: black;
        border: none;
        padding: 15px 30px;
        border-radius: 10px;
        font-size: 20px;
        font-weight: 600;
        cursor: pointer;
        width: 100%;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background: linear-gradient(90deg, #004d40 0%, #00695c 100%);
        transform: scale(1.05);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        color:black;
    }
    </style>
""", unsafe_allow_html=True)

# Header with logo and navigation bar
col_logo, col_nav = st.columns([1, 5])  # col_logo for logo, col_nav for navigation
with col_logo:
    st.image("logo.png", width=80)
with col_nav:
    st.markdown("""
        <div class="navbar">
            <button onclick="window.scrollTo({top: 0, behavior: 'smooth'});">Home</button>
            <button onclick="document.getElementById('guidelines').scrollIntoView({behavior: 'smooth'});">Guidelines/Documentations</button>
            <button onclick="document.getElementById('support').scrollIntoView({behavior: 'smooth'});">Support</button>
            <button onclick="document.getElementById('compendium').scrollIntoView({behavior: 'smooth'});">Compendium</button>
            <button class="highlight" onclick="document.getElementById('youth_registration').scrollIntoView({behavior: 'smooth'});">Youth Registration</button>
            <button class="login-btn">Login</button>
            <div class="profile-icon">U</div> <!-- Placeholder for user profile icon -->
        </div>
                
    """, unsafe_allow_html=True)

t = translations[st.session_state.lang]
# Language selector (immediately after title area)
lang_options = ["en", "hi", "bn", "mr", "te", "ta", "gu", "ur", "kn", "or", "ml"]
lang_names = ["English", "рд╣рд┐рдВрджреА / Hindi", "ржмрж╛ржВрж▓рж╛ / Bengali", "рдорд░рд╛рдареА / Marathi", "р░др▒Жр░▓р▒Бр░Чр▒Б / Telugu", "родрооро┐ро┤рпН / Tamil", "ркЧрлБркЬрк░рк╛ркдрлА / Gujarati", "╪з╪▒╪п┘И / Urdu", "р▓Хр▓ир│Нр▓ир▓б / Kanada", "рмУрмбрм╝рм┐рмЖ", "р┤ор┤▓р┤пр┤╛р┤│р┤В / Malyalam"]

lang_index = lang_options.index(st.session_state.lang)
selected_lang = st.selectbox(t["language"], lang_names, index=lang_index, key="lang_select")
st.session_state.lang = lang_options[lang_names.index(selected_lang)] 


# Header title
st.markdown("----")

# Main Layout
col1, col2 = st.columns([1, 2])  # Left for placeholder, right for content

# AI instructor
with col1:
    st.markdown("<h3 style='color: #00695c; text-align: center; font-family: Arial, sans-serif; font-weight: bold;'>ЁЯдЦ Green Matcher AI Assistant</h3>", unsafe_allow_html=True)
    
    # Initialize chat history in session state
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = [("AI", "Hi! IтАЩm your Green Matcher AI. How can I help? Try 'How to get started' or 'What are green jobs?'")]

    # Display chat history
    for speaker, message in st.session_state.chat_history:
        bg_color = '#ff9800' if speaker == 'AI' else '#2979FF'
        text_align = 'left' if speaker == 'AI' else 'right'
        st.markdown(f"""
            <div style='margin: 5px; padding: 12px; border-radius: 15px; background-color: {bg_color}; color: white; text-align: {text_align}; 
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); animation: fadeIn 0.5s ease-in; max-width: 70%;'>
            <b style='font-size: 16px;'>{speaker}:</b> {message}</div>
        """, unsafe_allow_html=True)

    # User input
    user_input = st.text_input("Ask me anything...", key="chat_input", placeholder="Type your question...")
    if user_input:
        from langchain_huggingface import HuggingFacePipeline
        from langchain.prompts import PromptTemplate
        from langchain.chains import ConversationChain
        from langchain.memory import ConversationBufferMemory
        from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
        import torch

        # Load a lightweight Hugging Face model
        model_id = "gpt2"
        tokenizer = AutoTokenizer.from_pretrained(model_id)
        model = AutoModelForCausalLM.from_pretrained(model_id)
        pipe = pipeline("text-generation", model=model, tokenizer=tokenizer, device=0 if torch.cuda.is_available() else -1, 
                        max_new_tokens=50, truncation=True, temperature=0.7, top_k=50)
        llm = HuggingFacePipeline(pipeline=pipe)

        # Define memory and prompt with history
        memory = ConversationBufferMemory()
        for speaker, message in st.session_state.chat_history:
            memory.chat_memory.add_user_message(message) if speaker == "User" else memory.chat_memory.add_ai_message(message)
        prompt = PromptTemplate(
            input_variables=["input", "lang", "history"],  # Added 'history' to match memory
            template="You are a friendly AI assistant for Green Matchers, a job-matching platform for green careers. Maintain context from previous messages: {history}. Provide concise, helpful responses in {lang}. User input: {input}"
        )

        # Get response
        chain = ConversationChain(llm=llm, memory=memory, prompt=prompt)
        response = chain.predict(input=user_input, lang=st.session_state.lang)

        # Update chat history
        st.session_state.chat_history.append(("User", user_input))
        st.session_state.chat_history.append(("AI", response[:200]))

        # Rerun to update display
        st.rerun()

    # Guidelines Section (expander for navigation)
    st.markdown(f'<div id="guidelines"></div>', unsafe_allow_html=True)
    with st.expander("Guidelines/Documentations"):
        st.write("How to use semantic AI for green jobs: Use 'Python web dev' to match 'back-end green intern'тАФbridges keyword biases for fairer access. Advances SDGs 8/10 by simulating 20% diverse hires.")

    # Support Section
    st.markdown(f'<div id="support"></div>', unsafe_allow_html=True)
    with st.expander("Support"):
        st.write("Contact us for help: shivamjaiswal.2024.cse@rajalakshmi.edu.in")

    # Compendium Section
    st.markdown(f'<div id="compendium"></div>', unsafe_allow_html=True)
    with st.expander("Compendium"):
        st.write("Collection of green job resources.")

    # Youth Registration Section
    st.markdown(f'<div id="youth_registration"></div>', unsafe_allow_html=True)
    with st.expander("Youth Registration"):
        st.write("Register for youth programs.")

    # About Section (new expander for team/SDGs)
    st.markdown(f'<div id="about"></div>', unsafe_allow_html=True)
    with st.expander("About"):
        st.write("Team Green Matchers: Shivam Jaiswal (backend/AI), Neha.R.N, Nishani.B, Mohamed Adhil.I. Advances SDGs 8/10 by simulating 20% diverse hires.")




with col2:
    tabs = st.tabs([t["personal_details"], t["certificate"], t["project"], t["ai_internship"], t["company"]])   
    # Personal Details Section
    with tabs[0]:
        st.markdown(f'<div class="section-card"><div class="section-title">ЁЯМ▒ {t["personal_details"]}</div>', unsafe_allow_html=True)
        with st.form("personal_details_form"):
            name = st.text_input("Name", key="name_input")
            email = st.text_input("Email", key="email_input")
            phone = st.text_input("Phone", key="phone_input")
            skills = st.multiselect("Skills", ["Python", "Django", "AI", "Renewable Energy", "Waste Management"], key="skills_input")
            profile_pic = st.file_uploader("Upload Profile Picture", type=["jpg", "png"], key="profile_pic_input")
            if profile_pic is not None:
                st.image(profile_pic, caption="Uploaded Profile Picture Preview", use_column_width=True)
            if st.form_submit_button("Save Details"):
                st.session_state.skills = skills  # Store skills in session state
                st.success("Personal details saved!")
                st.write(f"Selected skills: {skills}")
        st.markdown('</div>', unsafe_allow_html=True)

    # Certificate Section
    with tabs[1]: 
        st.markdown(f'<div class="section-card"><div class="section-title">ЁЯПЖ {t["certificate"]}</div>', unsafe_allow_html=True)
        with st.form("certificate_form"):
            cert_name = st.text_input("Certificate Name", key="cert_name_input")
            cert_link = st.text_input("Link or Upload", key="cert_link_input")
            if st.form_submit_button("Add Certificate"):
                st.success(f"Added: {cert_name}")
                if "certificates" not in st.session_state:
                    st.session_state.certificates = []
                st.session_state.certificates.append({"name": cert_name, "link": cert_link})
        if "certificates" in st.session_state:
            st.write("**Your Certificates:**")
            for cert in st.session_state.certificates:
                st.write(f"- {cert['name']} ({cert['link']})")
        st.markdown('</div>', unsafe_allow_html=True)


    # Project Details Section
    with tabs[2]:
        st.markdown(f'<div class="section-card"><div class="section-title">ЁЯЪА {t["project"]}</div>', unsafe_allow_html=True)
        with st.form("project_form"):
            proj_title = st.text_input("Project Title", key="proj_title_input")
            proj_desc = st.text_area("Description", key="proj_desc_input")
            proj_link = st.text_input("GitHub/Link", key="proj_link_input")
            if st.form_submit_button("Add Project"):
                st.success(f"Added: {proj_title}")
                if "projects" not in st.session_state:
                    st.session_state.projects = []
                st.session_state.projects.append({"title": proj_title, "desc": proj_desc, "link": proj_link})
        if "projects" in st.session_state:
            st.write("**Your Projects:**")
            for proj in st.session_state.projects:
                st.write(f"- **{proj['title']}**: {proj['desc']} ({proj['link']})")
        st.markdown('</div>', unsafe_allow_html=True)

# AI internship section
    with tabs[3]:
        st.markdown(f'<div class="section-card"><div class="section-title">ЁЯТ╝ {t["ai_internship"]}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="icon-box">ЁЯОУ Learn AI Skills<br/>Join Programs</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

# Company detail section
    with tabs[4]:
        st.markdown(f'<div class="section-card"><div class="section-title">ЁЯПв {t["company"]}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="icon-box">ЁЯМЯ Top Green Companies<br/>Explore Now</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)


    # Search Button
    if st.button(t["button"]):
        if st.session_state.get("skills"):  # Use skills from session state
            with st.spinner(t["success"]):
                try:
                    match_response = requests.post("http://127.0.0.1:8000/match_jobs", 
                                                   json={"skill_text": st.session_state.skills, "lang": st.session_state.lang},
                                                   timeout=10)
                    data = match_response.json()
                    matches = data.get("matches", [])
                    suggestions = data.get("suggestions", [])

                    

                    if matches:
                        st.toast(f"{t['success']} - {len(matches)} {t['matches_header'].lower()} found!", icon="тЬЕ")
                        st.success(t["success"])
                        st.markdown(f'<div class="section-card"><div class="section-title">тЬЕ {t["matches_header"]}</div>', unsafe_allow_html=True)
                        for match in matches:
                            st.markdown(f"**{match['job_title']}** (Similarity: {match['similarity']:.2f})")
                            st.markdown(f"{match['description']}")
                            st.markdown("---")
                        st.markdown('</div>', unsafe_allow_html=True)
                    else:
                        st.warning(t["no_matches"])

                    if suggestions:
                        with st.expander("Upskilling Suggestions"):
                            st.markdown("### Suggested Skills to Improve Matches")
                            for sug in suggestions:
                                st.markdown(f"- {sug['skill']}: [Course Link]({sug['link']})")
                    
                    narrative_response = requests.post("http://127.0.0.1:8000/generate_narrative", 
                                                       json={"skill_text": st.session_state.skills, "lang": st.session_state.lang})
                    narrative = narrative_response.json()["narrative"]
                    st.markdown(f'<div class="section-card"><div class="section-title">ЁЯУЦ {t["story_header"]}</div>{narrative}</div>', unsafe_allow_html=True)

                except requests.exceptions.Timeout:
                    st.error(t["error"].format(error="Request timed out"))    
                except Exception as e:
                    st.error(t["error"].format(error=str(e)))
        else:
            st.warning(t["enter_skills"])

            
    # Real-time Notifications
    st.markdown("""
        <script>
        const ws = new WebSocket("ws://127.0.0.1:8000/ws");
        ws.onmessage = function(event) {
            const notifications = document.getElementById("notifications");
            notifications.innerHTML += `<p>${event.data}</p>`;
        };
        ws.onerror = function(error) {
            console.error("WebSocket error:", error);
        };
        ws.onclose = function() {
            console.log("WebSocket closed");
        };
        </script>
        <div id="notifications" style="background-color: #f0f0f0; padding: 10px; border-radius: 5px; margin-top: 20px;">
            <h3>Notifications</h3>
        </div>
    """, unsafe_allow_html=True)

# Bottom Section
st.markdown("---")
bottom_col1, bottom_col2 = st.columns(2)

with bottom_col1:
    st.markdown(f'<div class="section-card"><div class="section-title">ЁЯЪА {t["project"]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="icon-box">ЁЯУК Browse Projects<br/>Green Initiatives</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

with bottom_col2:
    st.markdown(f'<div class="section-card"><div class="section-title">ЁЯТм {t["prompt_word"]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="icon-box">тЬНя╕П AI Chat Assistant<br/>Ask Questions</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# PWA Support
st.markdown("""
<link rel="manifest" href="/manifest.json">
<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/service-worker.js')
      .then(() => console.log('Service Worker registered'))
      .catch(err => console.log('Service Worker error:', err));
  }
</script>
""", unsafe_allow_html=True)




